    public static boolean
    onlyDigits(String str)
    {
        // Regex to check string   contains only digits
        String regex = "[0-9]+";
  
        // Compile the ReGex
        Pattern p = Pattern.compile(regex);
  
        // Find match between given string and regular expression   using Pattern.matcher()
        Matcher m = p.matcher(str);
  
        // Return if the string matched the ReGex
        return m.matches();
    }
--------------------------------------------------------------------------------------------------------
    String pattern = "[0-9]+";
        boolean match =Pattern.matches(pattern,"12345");
        
        System.out.println(match);
        

[abc]: It would match with text if the text is having either one of them(a,b or c) and only once.
[^abc]:  Any single character except a, b, or c (^ denote negation)
[a-zA-Z]:  a through z, or A through Z, inclusive (range)
[a-d[m-p]]:  a through d, or m through p: [a-dm-p] (union)
[a-z&&[def]]:  Any one of them (d, e, or f)
[a-z&&[^bc]]: a through z, except for b and c: [ad-z] (subtraction)
[a-z&&[^m-p]]:  a through z, and not m through p: [a-lq-z] (subtraction)
Predefined Character Classes â€“ Metacharacters

These are like short codes which you can use while writing regex.

Construct	Description
.   ->	Any character (may or may not match line terminators)
\d  ->	A digit: [0-9]
\D  ->	A non-digit: [^0-9]
\s  ->	A whitespace character: [ \t\n\x0B\f\r]
\S  ->	A non-whitespace character: [^\s]
\w  ->	A word character: [a-zA-Z_0-9]
\W  ->	A non-word character: [^\w]